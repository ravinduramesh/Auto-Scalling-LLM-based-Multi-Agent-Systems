import json
import matplotlib.pyplot as plt

from common_resources_for_evaluators import jsonFilePaths, ground_truth_vocab, clean_text

agentCountsAndBinaryWeight = dict()
ground_truth_vocab = set(ground_truth_vocab)

# Read data from the JSON file
for jsonFilePath in jsonFilePaths:
    with open(jsonFilePath, "r") as jsonFile:
        jsonData = json.load(jsonFile)

    # Count number of agents
    agents = set()
    for entry in jsonData:
        agents.add(entry["role"])

    # Binary weight the new knowledge
    initialAgents = {"Patient", "General-Ward-Doctor", "Nurse"}
    initialAgentsContent = ""
    autoGeneratedAgentsContent = ""

    for entry in jsonData:
        if entry["role"] in initialAgents:
            initialAgentsContent += entry["content"] + " "
            initialAgents.remove(entry["role"])
        else:
            autoGeneratedAgentsContent += entry["content"] + " "

    # Clean the text data and remove stopwords
    initialAgentsCleanedContent = clean_text(initialAgentsContent)
    autoGeneratedAgentsCleanedContent = clean_text(autoGeneratedAgentsContent)

    initialAgentsTermSet = set(initialAgentsCleanedContent.split())
    autoGeneratedAgentsTermSet = set(autoGeneratedAgentsCleanedContent.split())
    termsToScoreConversation = ground_truth_vocab.intersection(autoGeneratedAgentsTermSet - initialAgentsTermSet)

    filename = jsonFilePath.split("/")[-2] + '\n' + jsonFilePath.split("/")[-1]
    agentCountsAndBinaryWeight[filename] = [(len(agents) - 1), len(termsToScoreConversation)]

print("Number of agents are counted for each JSON file.")

# Plot a scatter plot of agent count vs binary weight
fig, axes = plt.subplots(1, 3, figsize=(20, 8))
plt.rcParams.update({'font.size': 15})

scatterColors = {
    "autogen": 'orangered',
    "DRTAG": 'lawngreen',
    "IAAG": 'dodgerblue'
}

# Define the selection types
selection_types = ["llm-selection", "round-robin-selection", "random-selection"]
selection_titles = ["LLM Selection", "Round Robin Selection", "Random Selection"]

for idx, selection_type in enumerate(selection_types):
    ax = axes[idx]
    for key, value in agentCountsAndBinaryWeight.items():
        if selection_type in key:
            label = (key.split("\n")[-1]).split("-")[0]
            color = scatterColors[label]
            ax.scatter(value[0], value[1], color=color, s=100)

    ax.set_title(selection_titles[idx])
    ax.set_xlabel("Number of Agents")
    ax.set_ylabel("Binary Weights for New Knowledge")
    ax.grid(True)

from matplotlib.patches import Patch
legend_elements = [
    Patch(facecolor='orangered', label='Autogen'),
    Patch(facecolor='lawngreen', label='DRTAG'),
    Patch(facecolor='dodgerblue', label='IAAG')
]
fig.legend(handles=legend_elements, loc="upper right", title="LLM-based MAS approach")
fig.suptitle("Agent Count vs Binary Weights for New Knowledge")
plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.savefig("binaryWeightingScoreVsAgentCount.png")
print("Scatter plot of agent count vs binary weight is saved as binaryWeightingScoreVsAgentCount.png")
